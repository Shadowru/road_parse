{"version":3,"sources":["../src/road_generate.js"],"names":["turf","csv","require","fs","metersParser","MetersParser","geoGenerator","GeoGenerator","Array","prototype","pushArray","arr","push","apply","collection","createReadStream","pipe","on","data","road","Road","meters","Meters","work","Line","undefined","parsed_meters","parse","length","slice_list","generateGeoJson","trim","toLowerCase","featureCollection","fs_extra","writeJsonSync","spaces"],"mappings":";;AAAA;;IAAYA,I;;AAKZ;;;;AACA;;;;AACA;;;;;;;;;;AALA,MAAMC,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AAMA,MAAME,YAAY,GAAG,IAAIC,sBAAJ,EAArB;AACA,MAAMC,YAAY,GAAG,IAAIC,sBAAJ,EAArB;;AAEAC,KAAK,CAACC,SAAN,CAAgBC,SAAhB,GAA4B,UAAUC,GAAV,EAAe;AACvC,OAAKC,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsBF,GAAtB;AACH,CAFD;;AAIA,MAAMG,UAAU,GAAG,EAAnB;AAEAX,EAAE,CAACY,gBAAH,CAAoB,mBAApB,EACKC,IADL,CACUf,GAAG,CAAC;AACN,eAAa;AADP,CAAD,CADb,EAIKgB,EAJL,CAIQ,MAJR,EAIiBC,IAAD,IAAU;AAElB;AAEA,QAAMC,IAAI,GAAGD,IAAI,CAACE,IAAlB;AACA,QAAMC,MAAM,GAAGH,IAAI,CAACI,MAApB;AACA,QAAMC,IAAI,GAAGL,IAAI,CAACM,IAAlB;;AAEA,MAAIL,IAAI,KAAKM,SAAb,EAAwB;AACpB,QAAIJ,MAAM,KAAKI,SAAf,EAA0B;AAEtB,YAAMC,aAAa,GAAGtB,YAAY,CAACuB,KAAb,CAAmBN,MAAnB,CAAtB;;AAEA,UAAIK,aAAa,KAAKD,SAAlB,IAA+BC,aAAa,CAACE,MAAd,KAAyB,CAA5D,EAA+D;AAE3D,cAAMC,UAAU,GAAGvB,YAAY,CAACwB,eAAb,CACfX,IAAI,CAACY,IAAL,GAAYC,WAAZ,EADe,EAEfN,aAFe,EAGfH,IAHe,CAAnB;;AAMA,YAAIM,UAAU,KAAKJ,SAAf,IAA4BI,UAAU,CAACD,MAAX,GAAoB,CAApD,EAAuD;AACnDd,UAAAA,UAAU,CAACJ,SAAX,CAAqBmB,UAArB;AACH;AAEJ;AAEJ;AACJ;AAEJ,CAlCL,EAmCKZ,EAnCL,CAmCQ,KAnCR,EAmCe,MAAM;AAEb,QAAMgB,iBAAiB,GAAGjC,IAAI,CAACiC,iBAAL,CAAuBnB,UAAvB,CAA1B;;AAEAoB,oBAASC,aAAT,CAAuB,oBAAvB,EAA6CF,iBAA7C,EAAgE;AAACG,IAAAA,MAAM,EAAE;AAAT,GAAhE;AAEH,CAzCL","sourcesContent":["import * as turf from \"@turf/turf\";\r\n\r\nconst csv = require('csv-parser')\r\nconst fs = require('fs')\r\n\r\nimport MetersParser from './MetersParser'\r\nimport GeoGenerator from './GeoGenerator'\r\nimport fs_extra from \"fs-extra\";\r\n\r\nconst metersParser = new MetersParser();\r\nconst geoGenerator = new GeoGenerator();\r\n\r\nArray.prototype.pushArray = function (arr) {\r\n    this.push.apply(this, arr);\r\n};\r\n\r\nconst collection = [];\r\n\r\nfs.createReadStream('./data/export.csv')\r\n    .pipe(csv({\r\n        'separator': ';'\r\n    }))\r\n    .on('data', (data) => {\r\n\r\n        //console.log(data);\r\n\r\n        const road = data.Road;\r\n        const meters = data.Meters;\r\n        const work = data.Line;\r\n\r\n        if (road !== undefined) {\r\n            if (meters !== undefined) {\r\n\r\n                const parsed_meters = metersParser.parse(meters);\r\n\r\n                if (parsed_meters !== undefined && parsed_meters.length !== 0) {\r\n\r\n                    const slice_list = geoGenerator.generateGeoJson(\r\n                        road.trim().toLowerCase(),\r\n                        parsed_meters,\r\n                        work\r\n                    );\r\n\r\n                    if (slice_list !== undefined && slice_list.length > 0) {\r\n                        collection.pushArray(slice_list);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    })\r\n    .on('end', () => {\r\n\r\n        const featureCollection = turf.featureCollection(collection);\r\n\r\n        fs_extra.writeJsonSync('./data/repair.json', featureCollection, {spaces: 4})\r\n\r\n    });\r\n"],"file":"road_generate.js"}