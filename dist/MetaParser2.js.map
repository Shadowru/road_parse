{"version":3,"sources":["../src/MetaParser2.js"],"names":["String","prototype","replaceAll","search","replace","split","join","tokenize","MetaParser2","constructor","_initDict","parse","line","data1","_phase1","data3","_phase3","data2","_phase2","data4","_phase4","residue_line","state","value","region","road","numbers","residue","region_dict","fs_extra","readJsonSync","roads_dict","_dict","roads","region_pos","_findByType","undefined","_cut","start","end","substring","mutated_line","push","length","clean_line","road_pos","_findRoad","tokens","token","remove_ss","number","parseInt","isNaN","idx","indexOf","_phase5","geo_pos","_findByType2","long_token","title_name","name","tmp_pos","_findPosInLine","short_token","tmp_pos_short","name_token","tmp_name_short","token_idx","toLowerCase","token_size","type_list","dict_element","_isInList","type","test_line","values_list","includes","str","cutStart","cutEnd","substr"],"mappings":"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","sourcesContent":["import Logger from \"js-logger\";\r\nimport fs_extra from \"fs-extra\";\r\n\r\nString.prototype.replaceAll = function (search, replace) {\r\n    return this.split(search).join(replace);\r\n}\r\n\r\nString.prototype.tokenize = function () {\r\n    return this.split(' ');\r\n}\r\n\r\n\r\nexport default class MetaParser2 {\r\n\r\n    constructor() {\r\n        this._initDict();\r\n    }\r\n\r\n    parse(line) {\r\n\r\n        const data1 = this._phase1(line);\r\n        const data3 = this._phase3(data1.line);\r\n        const data2 = this._phase2(data3.line);\r\n        const data4 = this._phase4(data2.line);\r\n        //const data5 = this._phase5(data4.line);\r\n        const residue_line = data4.line;\r\n\r\n        // Logger.info('State : ' + data1.value);\r\n        // Logger.info('Region : ' + data2.value);\r\n        // Logger.info('Road : ' + data3.value);\r\n        // Logger.info('Meters : ' + data4.value);\r\n\r\n        return {\r\n            state: data1.value,\r\n            region: data2.value,\r\n            road: data3.value,\r\n            numbers: data4.value,\r\n            //geo: data5.value,\r\n            residue: residue_line\r\n        }\r\n\r\n    }\r\n\r\n    _initDict() {\r\n        const region_dict = fs_extra.readJsonSync(\r\n            './data/dict.json'\r\n        );\r\n\r\n        const roads_dict = fs_extra.readJsonSync(\r\n            './data/roads.json'\r\n        );\r\n\r\n        this._dict = {\r\n            region: region_dict,\r\n            roads: roads_dict\r\n        }\r\n    }\r\n\r\n    _phase1(line) {\r\n        const region_pos = this._findByType(line, ['субъект РФ']);\r\n        if (region_pos !== undefined) {\r\n\r\n            return {\r\n                line: this._cut(line, region_pos.start, region_pos.end),\r\n                value: line.substring(region_pos.start, region_pos.end)\r\n            }\r\n        }\r\n        return {\r\n            line: line,\r\n            value: undefined\r\n        }\r\n    }\r\n\r\n    _phase2(line) {\r\n\r\n        let mutated_line = line;\r\n        const value = [];\r\n\r\n        while (true) {\r\n            const region_pos = this._findByType(mutated_line, ['район', 'улус (р-н)']);\r\n            if (region_pos !== undefined) {\r\n                value.push(mutated_line.substring(region_pos.start, region_pos.end))\r\n                mutated_line = this._cut(mutated_line, region_pos.start, region_pos.end);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            line: mutated_line,\r\n            value: value.length > 0 ? value : undefined\r\n        }\r\n    }\r\n\r\n    _phase3(line) {\r\n\r\n        const clean_line = line.replaceAll(\"«\", \"\\\"\").replaceAll(\"»\", \"\\\"\").replaceAll(\"–\", \"-\");\r\n\r\n        const road_pos = this._findRoad(clean_line);\r\n\r\n        if (road_pos !== undefined) {\r\n            return {\r\n                line: this._cut(line, road_pos.start, road_pos.end),\r\n                value: line.substring(road_pos.start, road_pos.end)\r\n            }\r\n        }\r\n        return {\r\n            line: line,\r\n            value: undefined\r\n        }\r\n    }\r\n\r\n    _phase4(line) {\r\n\r\n        let mutated_line = line;\r\n        const value = [];\r\n\r\n        while (true) {\r\n            const tokens = mutated_line.tokenize();\r\n\r\n            for (const token of tokens) {\r\n                const remove_ss = token.replace(\"+\", \"\").replace(\",\", \"\").replace(\"км\", \"\").replace(\"км.\", \"\");\r\n                const number = parseInt(remove_ss);\r\n                if (!isNaN(number)) {\r\n                    value.push(token);\r\n                    const idx = mutated_line.indexOf(token);\r\n                    mutated_line = this._cut(\r\n                        mutated_line,\r\n                        idx,\r\n                        idx + token.length\r\n                    )\r\n\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            break;\r\n        }\r\n        return {\r\n            line: mutated_line,\r\n            value: value.length > 0 ? value : undefined\r\n        }\r\n    }\r\n\r\n    _phase5(line) {\r\n\r\n        let mutated_line = line;\r\n        const value = [];\r\n\r\n        while (true) {\r\n\r\n            const geo_pos = this._findByType2(mutated_line, ['село', 'деревня', 'город', 'город обл. знач.', 'город обл. подч.', 'сельское поселение', 'городское поселение']);\r\n            if (geo_pos !== undefined) {\r\n                value.push(mutated_line.substring(geo_pos.start, geo_pos.end))\r\n                mutated_line = this._cut(mutated_line, geo_pos.start, geo_pos.end);\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n\r\n        return {\r\n            line: mutated_line,\r\n            value: value.length > 0 ? value : undefined\r\n        }\r\n\r\n    }\r\n\r\n\r\n    _findRoad(line) {\r\n        for (const road of this._dict.roads) {\r\n            const long_token = road.title_name + \" \" + road.name;\r\n\r\n            const tmp_pos = this._findPosInLine(line, long_token);\r\n            if (tmp_pos !== undefined) {\r\n                return tmp_pos;\r\n            }\r\n\r\n            const short_token = road.title_name + \" \" + road.name;\r\n\r\n            const tmp_pos_short = this._findPosInLine(line, short_token);\r\n            if (tmp_pos_short !== undefined) {\r\n                return tmp_pos_short;\r\n            }\r\n\r\n            const name_token = road.name;\r\n\r\n            const tmp_name_short = this._findPosInLine(line, name_token);\r\n\r\n            if (tmp_name_short !== undefined) {\r\n                return tmp_name_short;\r\n            }\r\n\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    _findPosInLine(line, token) {\r\n        const token_idx = line.toLowerCase().indexOf(token.toLowerCase());\r\n        if (token_idx !== -1) {\r\n            const token_size = token.length;\r\n            return {\r\n                start: token_idx,\r\n                length: token_size,\r\n                end: token_idx + token_size\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    _findByType(line, type_list) {\r\n        for (const dict_element of this._dict.region) {\r\n            if (this._isInList(dict_element.type, type_list)) {\r\n                const token = dict_element.name;\r\n\r\n                const tmp_pos = this._findPosInLine(line, token);\r\n                if (tmp_pos !== undefined) {\r\n                    return tmp_pos;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    //TODO: callback\r\n    _findByType2(line, type_list) {\r\n\r\n        const test_line = line.replaceAll(\"\\\"\", \" \");\r\n\r\n        for (const dict_element of this._dict.region) {\r\n            if (this._isInList(dict_element.type, type_list)) {\r\n                const token = dict_element.name + \" \";\r\n\r\n                if (token.length > 5) {\r\n                    const tmp_pos = this._findPosInLine(test_line, token);\r\n                    if (tmp_pos !== undefined) {\r\n                        tmp_pos.end = tmp_pos.end - 1\r\n                        return tmp_pos;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    _isInList(value, values_list) {\r\n        return values_list.includes(value);\r\n    }\r\n\r\n    _cut(str, cutStart, cutEnd) {\r\n        return str.substr(0, cutStart) + str.substr(cutEnd + 1);\r\n    }\r\n\r\n}\r\n"],"file":"MetaParser2.js"}