{"version":3,"sources":["../src/MetaParser2.js"],"names":["String","prototype","replaceAll","search","replace","split","join","tokenize","MetaParser2","constructor","_initDict","parse","line","data1","_phase1","data3","_phase3","data2","_phase2","data4","_phase4","data5","_phase5","residue_line","state","value","region","road","numbers","geo","residue","region_dict","fs_extra","readJsonSync","roads_dict","_dict","roads","region_pos","_findByType","undefined","_cut","start","end","substring","mutated_line","push","length","clean_line","road_pos","_findRoad","tokens","token","remove_ss","number","parseInt","isNaN","idx","indexOf","geo_pos","_findByType2","long_token","title_name","name","tmp_pos","_findPosInLine","short_token","tmp_pos_short","name_token","tmp_name_short","token_idx","toLowerCase","token_size","type_list","dict_element","_isInList","type","test_line","values_list","includes","str","cutStart","cutEnd","substr"],"mappings":"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","sourcesContent":["import Logger from \"js-logger\";\r\nimport fs_extra from \"fs-extra\";\r\n\r\nString.prototype.replaceAll = function (search, replace) {\r\n    return this.split(search).join(replace);\r\n}\r\n\r\nString.prototype.tokenize = function () {\r\n    return this.split(' ');\r\n}\r\n\r\n\r\nexport default class MetaParser2 {\r\n\r\n    constructor() {\r\n        this._initDict();\r\n    }\r\n\r\n    parse(line) {\r\n\r\n        const data1 = this._phase1(line);\r\n        const data3 = this._phase3(data1.line);\r\n        const data2 = this._phase2(data3.line);\r\n        const data4 = this._phase4(data2.line);\r\n        const data5 = this._phase5(data4.line);\r\n        const residue_line = data5.line;\r\n\r\n        // Logger.info('State : ' + data1.value);\r\n        // Logger.info('Region : ' + data2.value);\r\n        // Logger.info('Road : ' + data3.value);\r\n        // Logger.info('Meters : ' + data4.value);\r\n\r\n        return {\r\n            state: data1.value,\r\n            region: data2.value,\r\n            road: data3.value,\r\n            numbers: data4.value,\r\n            geo: data5.value,\r\n            residue: residue_line\r\n        }\r\n\r\n    }\r\n\r\n    _initDict() {\r\n        const region_dict = fs_extra.readJsonSync(\r\n            './data/dict.json'\r\n        );\r\n\r\n        const roads_dict = fs_extra.readJsonSync(\r\n            './data/roads.json'\r\n        );\r\n\r\n        this._dict = {\r\n            region: region_dict,\r\n            roads: roads_dict\r\n        }\r\n    }\r\n\r\n    _phase1(line) {\r\n        const region_pos = this._findByType(line, ['субъект РФ']);\r\n        if (region_pos !== undefined) {\r\n\r\n            return {\r\n                line: this._cut(line, region_pos.start, region_pos.end),\r\n                value: line.substring(region_pos.start, region_pos.end)\r\n            }\r\n        }\r\n        return {\r\n            line: line,\r\n            value: undefined\r\n        }\r\n    }\r\n\r\n    _phase2(line) {\r\n\r\n        let mutated_line = line;\r\n        const value = [];\r\n\r\n        while (true) {\r\n            const region_pos = this._findByType(mutated_line, ['район', 'улус (р-н)']);\r\n            if (region_pos !== undefined) {\r\n                value.push(mutated_line.substring(region_pos.start, region_pos.end))\r\n                mutated_line = this._cut(mutated_line, region_pos.start, region_pos.end);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            line: mutated_line,\r\n            value: value.length > 0 ? value : undefined\r\n        }\r\n    }\r\n\r\n    _phase3(line) {\r\n\r\n        const clean_line = line.replaceAll(\"«\", \"\\\"\").replaceAll(\"»\", \"\\\"\").replaceAll(\"–\", \"-\");\r\n\r\n        const road_pos = this._findRoad(clean_line);\r\n\r\n        if (road_pos !== undefined) {\r\n            return {\r\n                line: this._cut(line, road_pos.start, road_pos.end),\r\n                value: line.substring(road_pos.start, road_pos.end)\r\n            }\r\n        }\r\n        return {\r\n            line: line,\r\n            value: undefined\r\n        }\r\n    }\r\n\r\n    _phase4(line) {\r\n\r\n        let mutated_line = line;\r\n        const value = [];\r\n\r\n        while (true) {\r\n            const tokens = mutated_line.tokenize();\r\n\r\n            for (const token of tokens) {\r\n                const remove_ss = token.replace(\"+\", \"\").replace(\",\", \"\").replace(\"км\", \"\").replace(\"км.\", \"\");\r\n                const number = parseInt(remove_ss);\r\n                if (!isNaN(number)) {\r\n                    value.push(token);\r\n                    const idx = mutated_line.indexOf(token);\r\n                    mutated_line = this._cut(\r\n                        mutated_line,\r\n                        idx,\r\n                        idx + token.length\r\n                    )\r\n\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            break;\r\n        }\r\n        return {\r\n            line: mutated_line,\r\n            value: value.length > 0 ? value : undefined\r\n        }\r\n    }\r\n\r\n    _phase5(line) {\r\n\r\n        let mutated_line = line;\r\n        const value = [];\r\n\r\n        while (true) {\r\n\r\n            const geo_pos = this._findByType2(mutated_line, ['село', 'деревня', 'город', 'город обл. знач.', 'город обл. подч.', 'сельское поселение', 'городское поселение']);\r\n            if (geo_pos !== undefined) {\r\n                value.push(mutated_line.substring(geo_pos.start, geo_pos.end))\r\n                mutated_line = this._cut(mutated_line, geo_pos.start, geo_pos.end);\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n\r\n        return {\r\n            line: mutated_line,\r\n            value: value.length > 0 ? value : undefined\r\n        }\r\n\r\n    }\r\n\r\n\r\n    _findRoad(line) {\r\n        for (const road of this._dict.roads) {\r\n            const long_token = road.title_name + \" \" + road.name;\r\n\r\n            const tmp_pos = this._findPosInLine(line, long_token);\r\n            if (tmp_pos !== undefined) {\r\n                return tmp_pos;\r\n            }\r\n\r\n            const short_token = road.title_name + \" \" + road.name;\r\n\r\n            const tmp_pos_short = this._findPosInLine(line, short_token);\r\n            if (tmp_pos_short !== undefined) {\r\n                return tmp_pos_short;\r\n            }\r\n\r\n            const name_token = road.name;\r\n\r\n            const tmp_name_short = this._findPosInLine(line, name_token);\r\n\r\n            if (tmp_name_short !== undefined) {\r\n                return tmp_name_short;\r\n            }\r\n\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    _findPosInLine(line, token) {\r\n        const token_idx = line.toLowerCase().indexOf(token.toLowerCase());\r\n        if (token_idx !== -1) {\r\n            const token_size = token.length;\r\n            return {\r\n                start: token_idx,\r\n                length: token_size,\r\n                end: token_idx + token_size\r\n            };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    _findByType(line, type_list) {\r\n        for (const dict_element of this._dict.region) {\r\n            if (this._isInList(dict_element.type, type_list)) {\r\n                const token = dict_element.name;\r\n\r\n                const tmp_pos = this._findPosInLine(line, token);\r\n                if (tmp_pos !== undefined) {\r\n                    return tmp_pos;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    //TODO: callback\r\n    _findByType2(line, type_list) {\r\n\r\n        const test_line = line.replaceAll(\"\\\"\", \" \");\r\n\r\n        for (const dict_element of this._dict.region) {\r\n            if (this._isInList(dict_element.type, type_list)) {\r\n                const token = dict_element.name + \" \";\r\n\r\n                if (token.length > 5) {\r\n                    const tmp_pos = this._findPosInLine(test_line, token);\r\n                    if (tmp_pos !== undefined) {\r\n                        tmp_pos.end = tmp_pos.end - 1\r\n                        return tmp_pos;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    _isInList(value, values_list) {\r\n        return values_list.includes(value);\r\n    }\r\n\r\n    _cut(str, cutStart, cutEnd) {\r\n        return str.substr(0, cutStart) + str.substr(cutEnd + 1);\r\n    }\r\n\r\n}"],"file":"MetaParser2.js"}