{"version":3,"sources":["../src/parse_address.js"],"names":["fs","require","readline","Logger","useDefaults","metaparser","MetaParser2","getMeta","addr","count","state","undefined","region","road","numbers","geo","printCSVLine","meta","console","log","residue","processLineByLine","file","fileStream","createReadStream","rl","createInterface","input","crlfDelay","Infinity","line","parsed_addr","parse"],"mappings":";;AAEA;;;;AAEA;;;;AACA;;;;;;AALA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AAMAE,mBAAOC,WAAP;;AAEA,MAAMC,UAAU,GAAG,IAAIC,oBAAJ,EAAnB;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACnB,MAAIC,KAAK,GAAG,CAAZ;;AACA,MAAID,IAAI,CAACE,KAAL,KAAeC,SAAnB,EAA8B;AAC1BF,IAAAA,KAAK;AACR;;AACD,MAAID,IAAI,CAACI,MAAL,KAAgBD,SAApB,EAA+B;AAC3BF,IAAAA,KAAK;AACR;;AACD,MAAID,IAAI,CAACK,IAAL,KAAcF,SAAlB,EAA6B;AACzBF,IAAAA,KAAK;AACR;;AACD,MAAID,IAAI,CAACM,OAAL,KAAiBH,SAArB,EAAgC;AAC5BF,IAAAA,KAAK;AACR;;AACD,MAAID,IAAI,CAACO,GAAL,KAAaJ,SAAjB,EAA4B;AACxBF,IAAAA,KAAK;AACR;;AACD,SAAO,OAAOA,KAAd;AACH;;AAED,SAASO,YAAT,CAAsBR,IAAtB,EAA4B;AACxB,QAAMS,IAAI,GAAGV,OAAO,CAACC,IAAD,CAApB;AACAU,EAAAA,OAAO,CAACC,GAAR,CACIF,IAAI,GAAG,GAAP,GACET,IAAI,CAACE,KADP,GACe,GADf,GAEEF,IAAI,CAACI,MAFP,GAEgB,GAFhB,GAGEJ,IAAI,CAACK,IAHP,GAGc,GAHd,GAIEL,IAAI,CAACO,GAJP,GAIa,GAJb,GAKEP,IAAI,CAACM,OALP,GAKiB,GALjB,GAMEN,IAAI,CAACY,OAPX;AASH;;AAED,eAAeC,iBAAf,CAAiCC,IAAjC,EAAuC;AACnC,QAAMC,UAAU,GAAGvB,EAAE,CAACwB,gBAAH,CAAoBF,IAApB,CAAnB;AAEA,QAAMG,EAAE,GAAGvB,QAAQ,CAACwB,eAAT,CAAyB;AAChCC,IAAAA,KAAK,EAAEJ,UADyB;AAEhCK,IAAAA,SAAS,EAAEC;AAFqB,GAAzB,CAAX,CAHmC,CAOnC;AACA;;AAEAX,EAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;;AAEA,aAAW,MAAMW,IAAjB,IAAyBL,EAAzB,EAA6B;AACzB;AACA;AACA,UAAMM,WAAW,GAAG1B,UAAU,CAAC2B,KAAX,CAAiBF,IAAjB,CAApB;AAEAd,IAAAA,YAAY,CAACe,WAAD,CAAZ;AACH;AACJ,C,CAED;;;AACAV,iBAAiB,CAAC,kBAAD,CAAjB,C,CACA","sourcesContent":["const fs = require('fs');\nconst readline = require('readline');\nimport Logger from \"js-logger\";\n\nimport MetaParser from \"./MetaParser\";\nimport MetaParser2 from \"./MetaParser2\";\n\nLogger.useDefaults();\n\nconst metaparser = new MetaParser2();\n\nfunction getMeta(addr) {\n    let count = 0;\n    if (addr.state !== undefined) {\n        count++;\n    }\n    if (addr.region !== undefined) {\n        count++;\n    }\n    if (addr.road !== undefined) {\n        count++;\n    }\n    if (addr.numbers !== undefined) {\n        count++;\n    }\n    if (addr.geo !== undefined) {\n        count++;\n    }\n    return 'PH' + count;\n}\n\nfunction printCSVLine(addr) {\n    const meta = getMeta(addr);\n    console.log(\n        meta + \";\"\n        + addr.state + \";\"\n        + addr.region + \";\"\n        + addr.road + \";\"\n        + addr.geo + \";\"\n        + addr.numbers + \";\"\n        + addr.residue\n    );\n}\n\nasync function processLineByLine(file) {\n    const fileStream = fs.createReadStream(file);\n\n    const rl = readline.createInterface({\n        input: fileStream,\n        crlfDelay: Infinity\n    });\n    // Note: we use the crlfDelay option to recognize all instances of CR LF\n    // ('\\r\\n') in input.txt as a single line break.\n\n    console.log('Meta;State;Region;Road;Geo;Meters;Residue;');\n\n    for await (const line of rl) {\n        //Logger.debug('===========================');\n        //Logger.debug('Data line : ' + line);\n        const parsed_addr = metaparser.parse(line);\n\n        printCSVLine(parsed_addr);\n    }\n}\n\n//processLineByLine('../data/test.txt');\nprocessLineByLine('../data/nomn.txt');\n//processLineByLine('../data/input.txt');\n"],"file":"parse_address.js"}