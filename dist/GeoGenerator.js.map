{"version":3,"sources":["../src/GeoGenerator.js"],"names":["turf","GeoGenerator","constructor","_initDict","road_dict","fs_extra","readJsonSync","_road_dict","_generateLineProp","data","contract","contractor","suppliers","line_prop","parsed_addr","road","title","protocolDate","contractUrl","organizationName","kpp","generateGeoJson","parsed_meters","slice_list","geoLine","_getRoad","undefined","road_linestring","lineString","parsedMeter","_getSliceLine","push","slice","err","console","error","start","end","options","units","lineSliceAlong","decodePolyline","str","precision","index","lat","lng","coordinates","shift","result","byte","latitude_change","longitude_change","factor","Math","pow","length","charCodeAt","route","routeElement","el1"],"mappings":"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","sourcesContent":["import fs_extra from \"fs-extra\";\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default class GeoGenerator {\r\n\r\n\r\n    constructor() {\r\n        this._initDict();\r\n    }\r\n\r\n    _initDict() {\r\n        const road_dict = fs_extra.readJsonSync(\r\n            './data/geo_roads.json'\r\n        );\r\n        this._road_dict = road_dict;\r\n    }\r\n\r\n    _generateLineProp(data) {\r\n\r\n        const contract = data.contract;\r\n        const contractor = contract.suppliers[0];\r\n\r\n        const line_prop = {\r\n            \"name\": data.parsed_addr.road,\r\n            \"title\": data.title,\r\n            \"date\": contract.protocolDate,\r\n            \"link\": contract.contractUrl,\r\n            \"contractor\": contractor.organizationName + 'КПП : ' + contractor.kpp\r\n        }\r\n\r\n        return line_prop;\r\n    }\r\n\r\n    generateGeoJson(road, parsed_meters, data) {\r\n\r\n        const line_prop = this._generateLineProp(data);\r\n\r\n        const slice_list = [];\r\n\r\n        const geoLine = this._getRoad(road);\r\n\r\n        if (geoLine !== undefined) {\r\n\r\n            const road_linestring = turf.lineString(geoLine, line_prop);\r\n\r\n            for (const parsedMeter of parsed_meters) {\r\n                try {\r\n                    this._getSliceLine(road_linestring, parsedMeter[0], parsedMeter[1])\r\n                    slice_list.push(slice);\r\n                } catch (err) {\r\n                    console.error(parsed_meters);\r\n                }\r\n            }\r\n        }\r\n\r\n        return slice_list;\r\n    }\r\n\r\n    _getSliceLine(road_linestring, start, end) {\r\n        const options = {units: 'meters'};\r\n\r\n        // const along_from = turf.along(road_linestring, start, options);\r\n        // const along_to = turf.along(road_linestring, end, options);\r\n\r\n        const slice = turf.lineSliceAlong(road_linestring, start, end, options);\r\n\r\n        return slice;\r\n    }\r\n\r\n    decodePolyline(str, precision) {\r\n        var index = 0,\r\n            lat = 0,\r\n            lng = 0,\r\n            coordinates = [],\r\n            shift = 0,\r\n            result = 0,\r\n            byte = null,\r\n            latitude_change,\r\n            longitude_change,\r\n            factor = Math.pow(10, precision || 6);\r\n\r\n        while (index < str.length) {\r\n            byte = null;\r\n            shift = 0;\r\n            result = 0;\r\n\r\n            do {\r\n                byte = str.charCodeAt(index++) - 63;\r\n                result |= (byte & 0x1f) << shift;\r\n                shift += 5;\r\n            } while (byte >= 0x20);\r\n\r\n            latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n\r\n            shift = result = 0;\r\n\r\n            do {\r\n                byte = str.charCodeAt(index++) - 63;\r\n                result |= (byte & 0x1f) << shift;\r\n                shift += 5;\r\n            } while (byte >= 0x20);\r\n\r\n            longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n\r\n            lat += latitude_change;\r\n            lng += longitude_change;\r\n\r\n            coordinates.push([lat / factor, lng / factor]);\r\n        }\r\n\r\n        return coordinates;\r\n    }\r\n\r\n    _getRoad(road) {\r\n        const geoLine = this._road_dict[road];\r\n        if (geoLine !== undefined) {\r\n            const route = this.decodePolyline(geoLine, 6);\r\n            for (const routeElement of route) {\r\n                const el1 = routeElement[0];\r\n                routeElement[0] = routeElement[1];\r\n                routeElement[1] = el1;\r\n            }\r\n            return route;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n}\r\n"],"file":"GeoGenerator.js"}