{"version":3,"sources":["../src/GeoGenerator.js"],"names":["turf","GeoGenerator","constructor","_initDict","road_dict","fs_extra","readJsonSync","_road_dict","generateGeoJson","road","parsed_meters","work","slice_list","geoLine","_getRoad","undefined","road_linestring","lineString","name","options","units","parsedMeter","along_from","along","properties","data","along_to","slice","lineSlice","push","err","console","error","decodePolyline","str","precision","index","lat","lng","coordinates","shift","result","byte","latitude_change","longitude_change","factor","Math","pow","length","charCodeAt","route","routeElement","el1"],"mappings":"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","sourcesContent":["import fs_extra from \"fs-extra\";\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default class GeoGenerator {\r\n\r\n\r\n    constructor() {\r\n        this._initDict();\r\n    }\r\n\r\n    _initDict() {\r\n        const road_dict = fs_extra.readJsonSync(\r\n            './data/geo_roads.json'\r\n        );\r\n        this._road_dict = road_dict;\r\n    }\r\n\r\n    generateGeoJson(road, parsed_meters, work) {\r\n\r\n        const slice_list = [];\r\n\r\n        const geoLine = this._getRoad(road);\r\n\r\n        if (geoLine !== undefined) {\r\n\r\n            const road_linestring = turf.lineString(geoLine, {\r\n                name: road,\r\n                work: work\r\n            });\r\n\r\n            const options = {units: 'meters'};\r\n\r\n            for (const parsedMeter of parsed_meters) {\r\n                try {\r\n                    const along_from = turf.along(road_linestring, parsedMeter[0], options);\r\n                    along_from.properties.name = 'Начало';\r\n                    along_from.properties.data = work;\r\n                    const along_to = turf.along(road_linestring, parsedMeter[1], options);\r\n                    along_to.properties.name = 'Начало';\r\n                    along_to.properties.data = work;\r\n\r\n                    const slice = turf.lineSlice(along_from, along_to, road_linestring);\r\n\r\n                    slice_list.push(along_from, along_to, slice);\r\n                } catch (err) {\r\n                    console.error(parsed_meters);\r\n                }\r\n            }\r\n        }\r\n\r\n        return slice_list;\r\n    }\r\n\r\n    decodePolyline(str, precision) {\r\n        var index = 0,\r\n            lat = 0,\r\n            lng = 0,\r\n            coordinates = [],\r\n            shift = 0,\r\n            result = 0,\r\n            byte = null,\r\n            latitude_change,\r\n            longitude_change,\r\n            factor = Math.pow(10, precision || 6);\r\n\r\n        while (index < str.length) {\r\n            byte = null;\r\n            shift = 0;\r\n            result = 0;\r\n\r\n            do {\r\n                byte = str.charCodeAt(index++) - 63;\r\n                result |= (byte & 0x1f) << shift;\r\n                shift += 5;\r\n            } while (byte >= 0x20);\r\n\r\n            latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n\r\n            shift = result = 0;\r\n\r\n            do {\r\n                byte = str.charCodeAt(index++) - 63;\r\n                result |= (byte & 0x1f) << shift;\r\n                shift += 5;\r\n            } while (byte >= 0x20);\r\n\r\n            longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));\r\n\r\n            lat += latitude_change;\r\n            lng += longitude_change;\r\n\r\n            coordinates.push([lat / factor, lng / factor]);\r\n        }\r\n\r\n        return coordinates;\r\n    }\r\n\r\n    _getRoad(road) {\r\n        const geoLine = this._road_dict[road];\r\n        if (geoLine !== undefined) {\r\n            const route = this.decodePolyline(geoLine, 6);\r\n            for (const routeElement of route) {\r\n                const el1 = routeElement[0];\r\n                routeElement[0] = routeElement[1];\r\n                routeElement[1] = el1;\r\n            }\r\n            return route;\r\n        }\r\n        return undefined;\r\n    }\r\n}"],"file":"GeoGenerator.js"}